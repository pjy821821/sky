
---------------------------------------

Reference Site
https://en.wikipedia.org/wiki/Git
Do Complite wiki's document

---------------------------------------

Git (/ɡɪt/[6]) is a version control system (VCS) for tracking changes in computer files and coordinating work on those files among multiple people. It is primarily used for software development,[7] but it can be used to keep track of changes in any files. As a distributed revision control system it is aimed at speed,[8] data integrity,[9] and support for distributed, non-linear workflows.[10]

Git was created by Linus Torvalds in 2005 for development of the Linux kernel, with other kernel developers contributing to its initial development.[11] Its current maintainer is Junio Hamano.

As with most other distributed version control systems, and unlike most client–server systems, every Git directory on every computer is a full-fledged repository with complete history and full version tracking abilities, independent of network access or a central server.[12]

Like the Linux kernel, Git is 

History
Git development began in April 2005, after many developers of the Linux kernel gave up access to BitKeeper, a proprietary source control management (SCM) system that they had formerly used to maintain the project.[13] The copyright holder of BitKeeper, Larry McVoy, had withdrawn free use of the product after claiming that Andrew Tridgell had reverse-engineered the BitKeeper protocols.

Like the Linux kernel, Git is free software distributed under the terms of the GNU General Public License version 2.

History[edit]
Git 개발은 2005 년 4 월에 시작되었습니다. Linux 커널의 많은 개발자가 이전에이 프로젝트를 유지 보수하는 데 사용했던 독점적 소스 제어 관리 (SCM) 시스템 인 BitKeeper에 대한 액세스를 포기한 후에였습니다. 비트 키퍼 (BitKeeper)의 저작권자 인 래리 맥보이 (Larry McVoy)는 앤드류 트리 젤 (Andrew Tridgell)이 비트 키퍼 (BitKeeper) 프로토콜을 리버스 엔지니어링 한 것으로 주장하면서이 제품의 무료 사용을 철회했다.

Linus Torvalds wanted a distributed system that he could use like BitKeeper, but none of the available free systems met his needs, especially for performance. Torvalds cited an example of a source-control management system needing 30 seconds to apply a patch and update all associated metadata, and noted that this would not scale to the needs of Linux kernel development, where syncing with fellow maintainers could require 250 such actions at once. For his design criteria, he specified that patching should take no more than three seconds,[8] and added three more points:

Take Concurrent Versions System (CVS) as an example of what not to do; if in doubt, make the exact opposite decision[10]
Support a distributed, BitKeeper-like workflow[10]
Include very strong safeguards against corruption, either accidental or malicious[9]
These criteria eliminated every then-extant version control system except Monotone. Performance considerations excluded it, too.[10] So immediately after the 2.6.12-rc2 Linux kernel development release, Torvalds set out to write his own system.[10]

Torvalds quipped about the name git (which means unpleasant person in British English slang): "I'm an egotistical bastard, and I name all my projects after myself. First 'Linux', now 'git'."[15][16] The man page describes Git as "the stupid content tracker".[17] The readme file of the source code elaborates further:[18]

The name "git" was given by Linus Torvalds when he wrote the very
first version. He described the tool as "the stupid content tracker"
and the name as (depending on your way):

 - random three-letter combination that is pronounceable, and not
   actually used by any common UNIX command.  The fact that it is a
   mispronunciation of "get" may or may not be relevant.
 - stupid. contemptible and despicable. simple. Take your pick from the
   dictionary of slang.
 - "global information tracker": you're in a good mood, and it actually
   works for you. Angels sing, and a light suddenly fills the room.
 - "g*dd*mn idiotic truckload of sh*t": when it breaks
The development of Git began on 3 April 2005.[19] Torvalds announced the project on 6 April;[20] it became self-hosting as of 7 April.[19] The first merge of multiple branches took place on 18 April.[21] Torvalds achieved his performance goals; on 29 April, the nascent Git was benchmarked recording patches to the Linux kernel tree at the rate of 6.7 per second.[22] On 16 June Git managed the kernel 2.6.12 release.[23]

Torvalds turned over maintenance on 26 July 2005 to Junio Hamano, a major contributor to the project.[24] Hamano was responsible for the 1.0 release on 21 December 2005, and remains the project's maintainer.[25]

Version	Original release date	Latest version	Release date
0.99	2005-07-11	0.99.9n	2005-12-15
1.0	2005-12-21	1.0.13	2006-01-27
1.1	2006-01-08	1.1.6	2006-01-30
1.2	2006-02-12	1.2.6	2006-04-08
1.3	2006-04-18	1.3.3	2006-05-16
1.4	2006-06-10	1.4.4.5	2008-07-16
1.5	2007-02-14	1.5.6.6	2008-12-17
1.6	2008-08-17	1.6.6.3	2010-12-15
1.7	2010-02-13	1.7.12.4	2012-10-17
1.8	2012-10-21	1.8.5.6	2014-12-17
1.9	2014-02-14	1.9.5	2014-12-17
2.0	2014-05-28	2.0.5	2014-12-17
2.1	2014-08-16	2.1.4	2014-12-17
2.2	2014-11-26	2.2.3	2015-09-04
2.3	2015-02-05	2.3.10	2015-09-29
2.4	2015-04-30	2.4.11	2016-03-17
2.5	2015-07-27	2.5.5	2016-03-17
2.6	2015-09-28	2.6.6	2016-03-17
2.7	2015-10-04	2.7.4	2016-03-17
2.8	2016-03-28	2.8.4	2016-06-06
2.9	2016-06-13	2.9.3	2016-08-12
2.10	2016-09-02	2.10.2	2016-10-28
2.11	2016-11-29	2.11.0	2016-11-29
Legend:Old versionOlder version, still supportedLatest versionLatest preview version

Adoption[edit]
/*영문*/
The Eclipse Foundation reported in its annual community survey that as of May 2014, Git is now the most widely used source code management tool, with 42.9% of professional software developers reporting that they use Git as their primary source control system[59] compared with 36.3% in 2013, 32% in 2012; or for Git responses excluding use of GitHub: 33.3% in 2014, 30.3% in 2013, 27.6% in 2012 and 12.8% in 2011.[60] Open source directory Black Duck Open Hub reports a similar uptake among open source projects.[61] The Stack Overflow developer survey reported in 2015 that 69.3% of developers use Git; 36.9% use Subversion; 12.2% use TFS; and 7.9% use Mercurial.[62]
The UK IT jobs website itjobswatch.co.uk reports that as of late September 2016, 29.27% of UK permanent software development job openings have cited Git,[63] ahead of 12.17% for Microsoft Team Foundation Server,[64] 10.60% for Subversion,[65] 1.30% for Mercurial,[66] and 0.48% for Visual SourceSafe.[67]
/*한글*/
Eclipse Foundation은 연례 커뮤니티 조사에서 2014 년 5 월 현재 Git이 가장 널리 사용되는 소스 코드 관리 도구이며 42.9 %의 전문 소프트웨어 개발자가 Git을 기본 소스 제어 시스템으로 사용한다고보고했습니다 [59] 2013 년 36.3 %, 2012 년 32 %; GitHub 사용을 제외한 Git 응답 : 2014 년 33.3 %, 2013 년 30.3 %, 2012 년 27.6 %, 2011 년 12.8 % 오픈 소스 디렉토리 블랙 덕 오픈 허브 (Black Duck Open Hub)는 오픈 소스 프로젝트들 사이에서 유사한 취향을보고합니다. Stack Overflow 개발자 설문 조사에 따르면 2015 년에 69.3 %의 개발자가 Git을 사용한다고보고되었습니다. 36.9 %는 Subversion을 사용합니다. 12.2 %는 TFS를 사용합니다. 7.9 %는 Mercurial을 사용한다.
영국의 IT 취업 웹 사이트 itjobswatch.co.uk는 2016 년 9 월 말 현재 영국 영원한 소프트웨어 개발 일자리의 29.27 %가 MS Team Foundation Server의 12.17 %보다 앞서 [63], [64]는 10.60 % Subversion, [65] Mercurial의 경우 1.30 %, Visual SourceSafe의 경우 0.48 %입니다. [67]

Security[edit]

Git does not provide access control mechanisms, but was designed for operation with other tools that specialize in access control.[68]

On 17 December 2014, an exploit was found affecting the Windows and Mac versions of the Git client. An attacker could perform arbitrary code execution on a target computer with Git installed by creating a malicious Git tree (directory) named .git (a directory in Git repositories that stores all the data of the repository) in a different case (such as .GIT or .Git, needed because Git doesn't allow the all-lowercase version of .git to be created manually) with malicious files in the .git/hooks subdirectory (a folder with executable files that Git runs) on a repository that the attacker made or on a repository that the attacker can modify. If a Windows or Mac user pulls (downloads) a version of the repository with the malicious directory, then switches to that directory, the .git directory will be overwritten (due to the case-insensitive trait of the Windows and Mac filesystems) and the malicious executable files in .git/hooks may be run, which results in the attacker's commands being executed. An attacker could also modify the .git/config configuration file, which allows the attacker to create malicious Git aliases (aliases for Git commands or external commands) or modify extant aliases to execute malicious commands when run. The vulnerability was patched in version 2.2.1 of Git, released on 17 December 2014, and announced on the next day.[69][70]

Git version 2.6.1, released on 29 September 2015, contained a patch for a security vulnerability (CVE-2015-7545)[71] which allowed arbitrary code execution.[72] The vulnerability was exploitable if an attacker could convince a victim to clone a specific URL, as the arbitrary commands were embedded in the URL itself.[73] An attacker could use the exploit via a man-in-the-middle attack if the connection was unencrypted,[73] as they could redirect the user to a URL of their choice. Recursive clones were also vulnerable, since they allowed the controller of a repository to specify arbitrary URLs via the gitmodules file.[73]

Git uses SHA-1 hashes internally. Linus Torvalds has responded that the hash was mostly to guard against accidental corruption, and the security a cryptographically secure hash gives was just an accidental side effect, with the main security being signing elsewhere.[74][75]


External links[edit]

 Wikimedia Commons has media related to Git. 

 Wikibooks has a book on the topic of: Git 
Official website
Git at Open Hub

[hide]
Version control software
 
Years, where available, indicate the date of first stable release. Systems with names in italics are no longer maintained or have planned end-of-life dates.
 
Local only

Free/open-source
 
RCS (1982) · 
 SCCS (1972)
  
Proprietary
 
PVCS (1985) · 
 QVCS (1991)
  
Revision controlled project visualization-2010-24-02.svg
 
Client–server

Free/open-source
 
CVS (1986, 1990 in C) · 
 CVSNT (1998) · 
 QVCS Enterprise (1998) · 
 Subversion (2000)
  
Proprietary
AccuRev SCM (2002) · 
ClearCase (1992) · 
CMVC (1994) · 
Dimensions CM (1980s) · 
DSEE (1984) · 
Endevor (1980s) · 
Integrity (2001) · 
Panvalet (1970s) · 
Perforce Helix (1995) · 
Software Change Manager (1970s) · 
StarTeam (1995) · 
Surround SCM (2002) · 
Synergy (1990) · 
Team Concert (2008) · 
Team Foundation Server (2005) · 
Visual Studio Team Services (2014) · 
Vault (2003) · 
Visual SourceSafe (1994)
  
Distributed

Free/open-source
ArX (2003) · 
BitKeeper (1998) · 
Codeville (2005) · 
Darcs (2002) · 
DCVS (2002) · 
Fossil (2007) · 
Git (2005) · 
GNU arch (2001) · 
GNU Bazaar (2005) · 
Mercurial (2005) · 
Monotone (2003) · 
SVK (2003) · 
Veracity (2010)

Proprietary
 
TeamWare (1990s?) · 
 Code Co-op (1997) · 
 Plastic SCM (2006) · 
 Team Foundation Server (2013) · 
 Visual Studio Team Services (2014)
  
Concepts

Branch · 
 Fork · 
 Changeset · 
 Commit  (Gated commit)
   · 
 Interleaved deltas · 
 Delta compression · 
 Data comparison · 
 Merge · 
 Repository · 
 Tag · 
 Trunk
  
Category · 
 Comparison · 
 List

Authority control

GND: 7687494-1
